name: CI
on:
  - push
  - pull_request
  - workflow_dispatch
jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version:
          # This must match what's in versions.sh (Meteor 3.2+ only)
          - "3.2"
          - "3.3"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PERSONAL_ACCESS_TOKEN }}

      - name: Build and Push multi-architecture Docker image
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          # Set platform based on Meteor version (ARM64 support issues with older versions)
          if [[ "${{ matrix.version }}" == "2.16" ]]; then
            PLATFORMS="linux/amd64"
            echo "Building Meteor ${{ matrix.version }} for AMD64 only due to ARM64 compatibility issues"
          else
            PLATFORMS="linux/amd64,linux/arm64"
            echo "Building Meteor ${{ matrix.version }} for multi-architecture"
          fi

          # Build and push image
          docker buildx build \
            --platform "$PLATFORMS" \
            --build-arg "METEOR_VERSION=${{ matrix.version }}" \
            --tag productiveme/meteor-base:${{ matrix.version }} \
            --push \
            ./src

          # Also tag as latest if this is the latest version
          if [[ "${{ matrix.version }}" == "3.3" ]]; then
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --build-arg "METEOR_VERSION=${{ matrix.version }}" \
              --tag productiveme/meteor-base:latest \
              --push \
              ./src
          fi
